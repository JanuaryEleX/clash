# 工作流名称
name: Auto Update Clash Config

# 触发条件
on:
  schedule:
    # 使用 GitHub Actions 允许的最快频率：每5分钟。
    - cron: '*/5 * * * *'
  workflow_dispatch:

# 【重要】添加这部分权限设置
permissions:
  contents: write

# 任务
jobs:
  # Job 1: 检查并等待更新
  check-for-update:
    runs-on: ubuntu-latest
    outputs:
      has_update: ${{ steps.check.outputs.has_update }}
      latest_sha: ${{ steps.check.outputs.latest_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for updates or wait for it
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="TopChina"
          REPO="proxy-list"
          FILE_PATH="README.md"
          STATE_FILE="upstream_commit.sha"
          API_URL="https://api.github.com/repos/${OWNER}/${REPO}/commits?path=${FILE_PATH}&per_page=1"

          # 读取本地记录的上一个SHA
          PREVIOUS_SHA=""
          if [ -f "$STATE_FILE" ]; then
            PREVIOUS_SHA=$(cat "$STATE_FILE")
          fi
          echo "Previous recorded SHA: ${PREVIOUS_SHA:-'None'}"

          # 获取上游最新的SHA
          LATEST_SHA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "${API_URL}" | jq -r '.[0].sha')
          if [ -z "$LATEST_SHA" ] || [ "$LATEST_SHA" == "null" ]; then
            echo "::error::Could not fetch latest commit SHA from upstream."
            exit 1
          fi
          echo "Latest upstream SHA: $LATEST_SHA"

          # --- 核心逻辑 ---
          # 如果SHA已经变了，说明更新已发生
          if [ "$LATEST_SHA" != "$PREVIOUS_SHA" ]; then
            echo "🚀 New update already found! Proceeding immediately."
            echo "has_update=true" >> $GITHUB_OUTPUT
            echo "latest_sha=${LATEST_SHA}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 如果SHA没变，进入动态等待模式，尝试捕捉即时更新
          echo "No update yet. Entering live-wait mode for up to 270 seconds..."
          # 循环等待，总时长略小于5分钟，避免与下一次cron重叠
          for i in $(seq 1 18); do # 18 * 15秒 = 270秒 = 4.5分钟
            sleep 15
            CURRENT_SHA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" "${API_URL}" | jq -r '.[0].sha')
            echo "  ... waiting, checking again ($i/18)"
            if [ "$CURRENT_SHA" != "$PREVIOUS_SHA" ]; then
              echo "✅ New update captured live! Proceeding."
              echo "has_update=true" >> $GITHUB_OUTPUT
              echo "latest_sha=${CURRENT_SHA}" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "No update detected in this 5-minute window. Exiting."
          echo "has_update=false" >> $GITHUB_OUTPUT
          
  # Job 2: 执行更新和提交
  update-and-commit:
    needs: check-for-update # 依赖于检查job
    if: needs.check-for-update.outputs.has_update == 'true' # 仅在有更新时运行
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # 写入最新的SHA到状态文件，为提交做准备
      - name: Create/Update state file
        run: echo "${{ needs.check-for-update.outputs.latest_sha }}" > upstream_commit.sha

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Run the update script
        run: python update_clash.py

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '🎉 Auto-update config from upstream commit ${{ needs.check-for-update.outputs.latest_sha }}'
          file_pattern: '1.yaml upstream_commit.sha'
