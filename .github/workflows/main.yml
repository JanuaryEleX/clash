# =========================================================================
#   方案 B: 缩短运行时间
#   - cron: 保持 '*/5 * * * *' (每5分钟运行一次)
#   - sleep: 缩短至 180 秒 (3分钟)
#   - 优点: 更新的最大理论延迟较短，约5分钟。
#   - 缺点: 在平台严重拥堵时，仍有被跳过的风险。
# =========================================================================

name: Auto Update Clash Config

on:
  # 手动触发
  workflow_dispatch:
  # 定时触发，每5分钟运行一次
  schedule:
    - cron: '*/5 * * * *'

jobs:
  check-for-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout local repository
        uses: actions/checkout@v4

      - name: Get local SHA
        id: local_sha
        run: |
          # 读取本地记录的 SHA 值
          sha=$(cat ./latest_sha.txt)
          echo "LOCAL_SHA=$sha" >> $GITHUB_ENV

      - name: Live Check for Remote SHA
        id: live_check
        run: |
          # 实时获取远程文件的最新 SHA，并禁用缓存
          REMOTE_SHA=""
          # *** 修改点: 将循环次数从18改为12 ***
          # 总共循环 12 次 * 15 秒 = 180 秒 (3分钟)
          for i in $(seq 1 12); do 
            # 使用 curl 获取最新的 commit SHA，重点是禁用缓存
            # -H "Cache-Control: no-cache": 强制请求不使用任何缓存
            # -H "Pragma: no-cache": 兼容旧的HTTP/1.0协议
            # 在URL后添加随机参数 "?$(date +%s)" 确保每次请求的URL都不同，防止CDN缓存
            LATEST_COMMIT_INFO=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
              "https://api.github.com/repos/MetaCubeX/Clash.Meta/commits/alpha?path=config.yaml&$(date +%s)")
            
            # 从返回的JSON中提取SHA值
            REMOTE_SHA=$(echo "$LATEST_COMMIT_INFO" | grep -o '"sha": *"[^"]*"' | head -n1 | cut -d'"' -f4)

            echo "Current remote SHA: $REMOTE_SHA"
            echo "Local SHA: ${{ env.LOCAL_SHA }}"

            if [ "$REMOTE_SHA" != "${{ env.LOCAL_SHA }}" ] && [ -n "$REMOTE_SHA" ]; then
              echo "✅ New update found! SHA: $REMOTE_SHA"
              echo "UPDATE_FOUND=true" >> $GITHUB_OUTPUT
              echo "REMOTE_SHA=$REMOTE_SHA" >> $GITHUB_OUTPUT
              exit 0 # 找到更新，成功退出循环
            fi

            # 如果不是最后一次循环，则等待15秒
            if [ $i -lt 12 ]; then
              echo "No update yet. Waiting for 15 seconds... (Attempt $i/12)"
              sleep 15
            fi
          done
          
          echo "UPDATE_FOUND=false" >> $GITHUB_OUTPUT
          echo "No update found after 3 minutes."

      - name: Update files if new version is found
        if: steps.live_check.outputs.UPDATE_FOUND == 'true'
        run: |
          # 下载最新的 config.yaml
          curl -L -o ./config.yaml "https://raw.githubusercontent.com/MetaCubeX/Clash.Meta/alpha/config.yaml"
          # 将新的 SHA 写入文件
          echo "${{ steps.live_check.outputs.REMOTE_SHA }}" > ./latest_sha.txt
          
          # 配置 Git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 提交并推送
          git add ./config.yaml ./latest_sha.txt
          # 检查是否有文件变动
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: auto update Clash Meta config.yaml to latest"
            git push
          fi
