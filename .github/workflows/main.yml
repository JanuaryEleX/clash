# =========================================================================
#   方案 B: 缩短运行时间 (基于您的代码修改)
# =========================================================================

# 工作流名称
name: Auto Update Clash Config

# 触发条件
on:
  schedule:
    # 调度周期保持不变，依然是5分钟
    - cron: '*/5 * * * *'
  workflow_dispatch:

# 【重要】添加这部分权限设置
permissions:
  contents: write

# 任务
jobs:
  # Job 1: 检查并等待更新
  check-for-update:
    runs-on: ubuntu-latest
    outputs:
      has_update: ${{ steps.check.outputs.has_update }}
      latest_sha: ${{ steps.check.outputs.latest_sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for updates or wait for it
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="TopChina"
          REPO="proxy-list"
          FILE_PATH="README.md"
          STATE_FILE="upstream_commit.sha"
          API_URL="https://api.github.com/repos/${OWNER}/${REPO}/commits?path=${FILE_PATH}&per_page=1"

          PREVIOUS_SHA=""
          if [ -f "$STATE_FILE" ]; then
            PREVIOUS_SHA=$(cat "$STATE_FILE")
          fi
          echo "Previous recorded SHA: ${PREVIOUS_SHA:-'None'}"

          LATEST_SHA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" -H "Cache-Control: no-cache" "${API_URL}" | jq -r '.[0].sha')
          if [ -z "$LATEST_SHA" ] || [ "$LATEST_SHA" == "null" ]; then
            echo "::error::Could not fetch latest commit SHA from upstream."
            exit 1
          fi
          echo "Latest upstream SHA: $LATEST_SHA"

          if [ "$LATEST_SHA" != "$PREVIOUS_SHA" ]; then
            echo "🚀 New update already found! Proceeding immediately."
            echo "has_update=true" >> $GITHUB_OUTPUT
            echo "latest_sha=${LATEST_SHA}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # *** 修改点: 将总等待时间从270秒缩短为180秒 ***
          echo "No update yet. Entering live-wait mode for up to 180 seconds..."
          # *** 修改点: 循环次数从18改为12 (12 * 15s = 180s) ***
          for i in $(seq 1 12); do
            sleep 15
            CURRENT_SHA=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" -H "Cache-Control: no-cache" "${API_URL}" | jq -r '.[0].sha')
            # *** 修改点: 更新日志中的循环总次数 ***
            echo "  ... waiting, checking again ($i/12)"
            if [ "$CURRENT_SHA" != "$PREVIOUS_SHA" ]; then
              echo "✅ New update captured live! Proceeding."
              echo "has_update=true" >> $GITHUB_OUTPUT
              echo "latest_sha=${CURRENT_SHA}" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "No update detected in this window. Exiting."
          echo "has_update=false" >> $GITHUB_OUTPUT
          
  # Job 2: 执行更新和提交 (此部分无需改动)
  update-and-commit:
    needs: check-for-update
    if: needs.check-for-update.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create/Update state file
        run: echo "${{ needs.check-for-update.outputs.latest_sha }}" > upstream_commit.sha

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: Run the update script
        run: python update_clash.py

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '🎉 Auto-update config from upstream commit ${{ needs.check-for-update.outputs.latest_sha }}'
          file_pattern: '1.yaml upstream_commit.sha'
